@use "sass:map";
@use "sass:math";
/* stylelint-disable plugin/stylelint-no-indistinguishable-colors */
/// Default set of border colors
/// @since 0.1.0
/// @group Backgrounds & Borders
/// @prop {Color} transparent [transparent] - transparent border color
/// @prop {Color} black [rgb(0, 0, 0)] - black border color
/// @prop {Color} dark [rgb(64, 64, 64)] - dark border color
/// @prop {Color} mid [rgb(128, 128, 128)] - middle contrasted border color
/// @prop {Color} light [rgb(192, 192, 192)] - light border color
/// @prop {Color} white [rgb(255, 255, 255)] - white border color
$border-colors: (
	"transparent": transparent,
	"black": rgb(0, 0, 0),
	"dark": rgb(64, 64, 64),
	"mid": rgb(128, 128, 128),
	"light": rgb(192, 192, 192),
	"white": rgb(255, 255, 255),
) !default;

/// Default set of border radii
/// @since 0.1.0
/// @group Backgrounds & Borders
/// @prop {Number} 0 [0] - 0 border radius
/// @prop {Number} xs [.125rem] - extra small border radius
/// @prop {Number} sm [.25rem] - small border radius
/// @prop {Number} md [.5rem] - medium border radius
/// @prop {Number} lg [1rem] - large border radius
/// @prop {Number} xl [2rem] - extra large border radius
/// @prop {Number} round [100%] - rounded border radius
$border-radii: (
	"0": 0,
	"xs": .125rem,
	"sm": .25rem,
	"md": .5rem,
	"lg": 1rem,
	"xl": 2rem,
	"round": 100%,
) !default;

/// Default border radius
/// @since 0.1.0
/// @group Backgrounds & Borders
/// @type Number
/// @require {variable} $border-radii - map of border radii
$border-radius: map.get($border-radii, "md") !default;

/// Default set of border-widths
/// @since 0.1.0
/// @group Backgrounds & Borders
/// @prop {Number} 0 [0] - 0 border width
/// @prop {Number} xs [.0625rem] - extra small border width
/// @prop {Number} sm [.125rem] - small border width
/// @prop {Number} md [.1875rem] - medium border width
/// @prop {Number} lg [.25rem] - large border width
/// @prop {Number} xl [.5rem] - extra large border width
$border-widths: (
	"0": 0,
	"xs": .0625rem,
	"sm": .125rem,
	"md": .1875rem,
	"lg": .25rem,
	"xl": .5rem,
) !default;

/// Default border width
/// @since 0.1.0
/// @group Backgrounds & Borders
/// @type Number
/// @require {variable} $border-widths - map of border widths
$border-width: map.get($border-widths, "md") !default;

/// Default set of directions for the box model
/// @since 0.1.0
/// @group Fragmentation
/// @prop {String} all [null] - all sides of the box model
/// @prop {List} bottom [(bottom)] - only the bottom side will be affected
/// @prop {List} left [(left)] - only the left side will be affected
/// @prop {List} right [(right)] - only the right side will be affected
/// @prop {List} top [(top)] - only the top will be affected
/// @prop {List} x [(left, right)] - the x axis, both left and right will be affected
/// @prop {List} y [(bottom, top)] - the x axis, both bottom and top will be affected
$box-directions: (
	"all": null,
	"bottom": (bottom),
	"left": (left),
	"right": (right),
	"top": (top),
	"x": (left, right),
	"y": (bottom, top),
) !default;

/// Default set of breakpoints
/// @since 0.1.0
/// @group Media Queries
/// @prop {Number} xs [0] - screens between 0 and 534px
/// @prop {Number} sm [34em] - screens between ~544px and ~767px wide
/// @prop {Number} md [48em] - screens between ~768px and ~991px wide
/// @prop {Number} lg [62em] - screens between ~992px and ~1199px wide
/// @prop {Number} xl [75em] - screens larger than ~1200px wide
$breakpoints: (
	"xs": "0",
	"sm": "34em",
	"md": "48em",
	"lg": "62em",
	"xl": "75em",
) !default;

/// Default cubic bezier function
/// @since 0.1.0
/// @group Animations, Transitions
/// @type Function
$cubic-bezier: cubic-bezier(.25, .46, .45, .94) !default;

/// Default set of animation durations
/// @since 0.1.0
/// @group Animations, Transitions
/// @prop {Number} xs [.125s] - extra short amount of time
/// @prop {Number} sm [.25s] - small amount of time
/// @prop {Number} md [.5s] - medium amount of time
/// @prop {Number} lg [1s] - large amount of time
/// @prop {Number} xl [1.5s] - longest amount of time
$durations: (
	"xs": .125s,
	"sm": .25s,
	"md": .5s,
	"lg": 1s,
	"xl": 1.5s,
) !default;

/// Default animation duration
/// @since 0.1.0
/// @group Animations, Transitions
/// @type Number
/// @require {variable} $durations - map of durations
$duration: map.get($durations, "sm") !default;

/// Default set of font families
/// @since 0.1.0
/// @group Fonts
/// @prop {String} monospace [menlo, monaco, consolas, "Courier New", monospace] - the default monospace family
/// @prop {String} sans-serif [-apple-system, BlinkMacSystemFont, "Segoe UI", "Roboto", "Oxygen", "Ubuntu", "Cantarell", "Fira Sans", "Droid Sans", "Helvetica Neue", arial, sans-serif] - the default sans serif font family
/// @prop {String} serif [georgia, "Times New Roman", times, serif] - the default serif font family
$font-families: (
	"monospace": #{menlo, monaco, consolas, "Courier New", monospace},
	"sans-serif": #{-apple-system, BlinkMacSystemFont, "Segoe UI", "Roboto", "Oxygen", "Ubuntu", "Cantarell", "Fira Sans", "Droid Sans", "Helvetica Neue", arial, sans-serif},
	"serif": #{georgia, "Times New Roman", times, serif},
) !default;

/// Default font family
/// @since 0.1.0
/// @group Fonts
/// @type String
/// @require {variable} $font-families - map of font families
$font-family: map.get($font-families, "sans-serif") !default;

/// Default set of font sizes
/// @since 0.1.0
/// @group Fonts
/// @prop {Number} 1 [.75rem] - smallest font size, about ~14px
/// @prop {Number} 2 [.85rem] - smaller font size, about ~16px
/// @prop {Number} 3 [1rem] - medium font size, 18px
/// @prop {Number} 4 [1.25rem] - large font size, about ~21px
/// @prop {Number} 5 [1.5rem] - larger font size, about ~27px
/// @prop {Number} 6 [2rem] - largest font size, 36px
$font-sizes: (
	"1": .75rem,
	"2": .85rem,
	"3": 1rem,
	"4": 1.25rem,
	"5": 1.5rem,
	"6": 2rem,
) !default;

/// Default font size
/// @group Fonts
/// @since 0.1.0
/// @type Number
/// @require {variable} $font-sizes - map of font sizes
$font-size: map.get($font-sizes, "3") !default;

/// Default set of font weights
/// @since 0.1.0
/// @group Fonts
/// @prop {String} thin [100] - thin font weight
/// @prop {String} slim [200] - slim font weight
/// @prop {String} light [300] - light font weight
/// @prop {String} normal [400] - normal font weight; matches normal keyword
/// @prop {Number} demibold [500] - demi bold weight
/// @prop {Number} semibold [600] - semi bold weight
/// @prop {Number} bold [700] - bold font weight, matches bold keyword
/// @prop {Number} thick [800] - dark font weight
/// @prop {Number} heavy [900] - darkest font weight
$font-weights: (
	"thin": 100,
	"slim": 200,
	"light": 300,
	"normal": 400,
	"demibold": 500,
	"semibold": 600,
	"bold": 700,
	"thick": 800,
	"heavy": 900,
) !default;

/// Default set of letter-spacings
/// @since 0.1.0
/// @group Fonts
/// @prop {Number} xs [-.125rem] - smallest letter spacing; ~-2px
/// @prop {Number} sm [-.0625rem] - smaller letter spacing, ~-1px
/// @prop {Number} md[0] - 0 letter spacing; text is normal; used to reset
/// @prop {Number} lg [.0625rem] - large letter spacing; ~1px
/// @prop {Number} xl [.125rem] - larger letter spacing; ~2px
$letter-spacings: (
	"xs": -.125rem,
	"sm": -.0625rem,
	"md": 0,
	"lg": .0625rem,
	"xl": .125rem,
) !default;

/// Default set of line heights
/// @since 0.1.0
/// @group Fonts
/// @prop {Number} xs [1] - smallest line-height; used to reset
/// @prop {Number} sm [1.2] - smaller line-height, typically for headings
/// @prop {Number} md[1.25] - medium line-height
/// @prop {Number} lg [1.5] - large line-height, used as the baseline for most type
/// @prop {Number} xl [2] - larger line-height, used for small type
$line-heights: (
	"xs": 1,
	"sm": 1.2,
	"md": 1.25,
	"lg": 1.5,
	"xl": 2,
) !default;

/// Default line-height
/// @since 0.1.0
/// @group Fonts
/// @type Number
/// @require {variable} $line-heights - map of line heights
$line-height: map.get($line-heights, "lg") !default;

/// Default line-height for headings
/// @since 0.1.0
/// @group Fonts
/// @type Number
/// @require {variable} $line-heights - map of line heights
$line-height-heading: map.get($line-heights, "sm") !default;

/// Base line multiplier for spacing
/// @since 0.1.0
/// @group Color
/// @prop {Number} invisible [0] - set opacity to 0 to be invisible
/// @prop {Number} disabled [.65] - set opacity to appear disabled
/// @prop {Number} beneath [.99] - set opacity to force stacking context and lay beneath
/// @prop {Number} visible [1] - set opacity to 1 to be visible
$opacities: (
	"invisible": 0,
	"disabled": .65,
	"beneath": .99,
	"visible": 1,
) !default;

/// Base line multiplier for spacing
/// @since 0.1.0
/// @group Box Model
/// @type Number
$spacer: 1rem !default;

/// Default set of spacing
/// @since 0.1.0
/// @group Box Model
/// @require {variable} $spacer - multiplier for creating map
/// @prop {Number} 0 [0] - reset the size to 0
/// @prop {Number} eighth [.125rem] - 1/8th the size of the default spacer
/// @prop {Number} qtr [.25rem] - 1/4th the size of the default spacer
/// @prop {Number} half [.5rem] - 1/2 the size of the default spacer
/// @prop {Number} 3qtr [.75rem] - 3/4th the size of the default spacer
/// @prop {Number} 1 [1rem] - the size of the default spacer
/// @prop {Number} 2 [2rem] - 2 times the size of the default spacer
/// @prop {Number} 3 [3rem] - 3 times the size of the default spacer
$spacing: (
	"0": 0,
	"eighth": ($spacer / 8),
	"qtr": ($spacer / 4),
	"half": ($spacer / 2),
	"3qtr": ($spacer * 3 / 4),
	"1": $spacer,
	"2": ($spacer * 2),
	"3": ($spacer * 3),
) !default;

/// Default set of sizing
/// @since 0.1.0
/// @group Box Model
/// @prop {String} auto [auto] - 75% of the total containers space
/// @prop {Number} 0 [0] - 0% of the total containers space
/// @prop {Number} qtr [25%] - 25% of the total containers space
/// @prop {Number} third [33.33%] - 33.33% of the total containers space
/// @prop {Number} half [50%] - 50% of the total containers space
/// @prop {Number} 2third [66.67%] - 66.67% of the total containers space
/// @prop {Number} 3qtr [75%] - 75% of the total containers space
/// @prop {Number} full [100%] - 100% of the total containers space
$sizing: (
	"auto": "auto",
	"0": 0,
	"qtr": math.percentage(1 / 4),
	"third": math.percentage(1 / 3),
	"half": math.percentage(1 / 2),
	"2third": math.percentage(2 / 3),
	"3qtr": math.percentage(3 / 4),
	"full": 100%,
) !default;

/// Sizing prefixes used for widths and heights
/// @since 0.1.0
/// @group Box Model
/// @type List
$sizing-prefixes: (max-, min-, "") !default;

/// Default set of z-indicies
/// @since 0.1.0
/// @group Positioning
/// @prop {String} level-negative-1 [-1000] - negative z-index
/// @prop {Number} level-0 [0] - level 0, base level
/// @prop {Number} level-1 [1000] - level 1
/// @prop {Number} level-2 [2000] - level 2
/// @prop {Number} level-3 [3000] - level 3
/// @prop {Number} level-4 [4000] - level 4
/// @prop {Number} level-5 [5000] - level 5
/// @prop {Number} level-6 [6000] - level 6
/// @prop {Number} level-7 [7000] - level 7
/// @prop {Number} level-8 [8000] - level 8
/// @prop {Number} level-9 [9000] - level 9
$z-indices: (
	"level-negative-1": -1000,
	"level-0": 0,
	"level-1": 1000,
	"level-2": 2000,
	"level-3": 3000,
	"level-4": 4000,
	"level-5": 5000,
	"level-6": 6000,
	"level-7": 7000,
	"level-8": 8000,
	"level-9": 9000,
) !default;
